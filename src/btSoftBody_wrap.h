#include "main.h"

#include <BulletSoftBody/btSoftBody.h>

extern "C"
{
	EXPORT btSoftBodyWorldInfo* btSoftBodyWorldInfo_new();
	EXPORT btScalar btSoftBodyWorldInfo_getAir_density(btSoftBodyWorldInfo* obj);
	EXPORT btBroadphaseInterface* btSoftBodyWorldInfo_getBroadphase(btSoftBodyWorldInfo* obj);
	EXPORT btDispatcher* btSoftBodyWorldInfo_getDispatcher(btSoftBodyWorldInfo* obj);
	EXPORT void btSoftBodyWorldInfo_getGravity(btSoftBodyWorldInfo* obj);
	EXPORT void btSoftBodyWorldInfo_getSparsesdf(btSoftBodyWorldInfo* obj);
	EXPORT btScalar btSoftBodyWorldInfo_getWater_density(btSoftBodyWorldInfo* obj);
	EXPORT void btSoftBodyWorldInfo_getWater_normal(btSoftBodyWorldInfo* obj);
	EXPORT btScalar btSoftBodyWorldInfo_getWater_offset(btSoftBodyWorldInfo* obj);
	EXPORT void btSoftBodyWorldInfo_setAir_density(btSoftBodyWorldInfo* obj, btScalar value);
	EXPORT void btSoftBodyWorldInfo_setBroadphase(btSoftBodyWorldInfo* obj, btBroadphaseInterface* value);
	EXPORT void btSoftBodyWorldInfo_setDispatcher(btSoftBodyWorldInfo* obj, btDispatcher* value);
	//EXPORT void btSoftBodyWorldInfo_setGravity(btSoftBodyWorldInfo* obj, void value);
	//EXPORT void btSoftBodyWorldInfo_setSparsesdf(btSoftBodyWorldInfo* obj, void value);
	EXPORT void btSoftBodyWorldInfo_setWater_density(btSoftBodyWorldInfo* obj, btScalar value);
	//EXPORT void btSoftBodyWorldInfo_setWater_normal(btSoftBodyWorldInfo* obj, void value);
	EXPORT void btSoftBodyWorldInfo_setWater_offset(btSoftBodyWorldInfo* obj, btScalar value);
	EXPORT void btSoftBodyWorldInfo_delete(btSoftBodyWorldInfo* obj);

	EXPORT btSoftBody::eAeroModel* btSoftBody_eAeroModel_new();
	EXPORT void btSoftBody_eAeroModel_delete(btSoftBody::eAeroModel* obj);

	EXPORT btSoftBody::eVSolver* btSoftBody_eVSolver_new();
	EXPORT void btSoftBody_eVSolver_delete(btSoftBody::eVSolver* obj);

	EXPORT btSoftBody::ePSolver* btSoftBody_ePSolver_new();
	EXPORT void btSoftBody_ePSolver_delete(btSoftBody::ePSolver* obj);

	EXPORT btSoftBody::eSolverPresets* btSoftBody_eSolverPresets_new();
	EXPORT void btSoftBody_eSolverPresets_delete(btSoftBody::eSolverPresets* obj);

	EXPORT btSoftBody::eFeature* btSoftBody_eFeature_new();
	EXPORT void btSoftBody_eFeature_delete(btSoftBody::eFeature* obj);

	EXPORT btSoftBody::fCollision* btSoftBody_fCollision_new();
	EXPORT void btSoftBody_fCollision_delete(btSoftBody::fCollision* obj);

	EXPORT btSoftBody::fMaterial* btSoftBody_fMaterial_new();
	EXPORT void btSoftBody_fMaterial_delete(btSoftBody::fMaterial* obj);

	EXPORT btSoftBody::sRayCast* btSoftBody_sRayCast_new();
	EXPORT btSoftBody* btSoftBody_sRayCast_getBody(btSoftBody::sRayCast* obj);
	EXPORT void btSoftBody_sRayCast_getFeature(btSoftBody::sRayCast* obj);
	EXPORT btScalar btSoftBody_sRayCast_getFraction(btSoftBody::sRayCast* obj);
	EXPORT int btSoftBody_sRayCast_getIndex(btSoftBody::sRayCast* obj);
	EXPORT void btSoftBody_sRayCast_setBody(btSoftBody::sRayCast* obj, btSoftBody* value);
	//EXPORT void btSoftBody_sRayCast_setFeature(btSoftBody::sRayCast* obj, void value);
	EXPORT void btSoftBody_sRayCast_setFraction(btSoftBody::sRayCast* obj, btScalar value);
	EXPORT void btSoftBody_sRayCast_setIndex(btSoftBody::sRayCast* obj, int value);
	EXPORT void btSoftBody_sRayCast_delete(btSoftBody::sRayCast* obj);

	EXPORT btScalar btSoftBody_ImplicitFn_Eval(btSoftBody::ImplicitFn* obj, btScalar* x);
	EXPORT void btSoftBody_ImplicitFn_delete(btSoftBody::ImplicitFn* obj);

	EXPORT btSoftBody::sCti* btSoftBody_sCti_new();
	EXPORT btCollisionObject* btSoftBody_sCti_getColObj(btSoftBody::sCti* obj);
	EXPORT void btSoftBody_sCti_getNormal(btSoftBody::sCti* obj);
	EXPORT btScalar btSoftBody_sCti_getOffset(btSoftBody::sCti* obj);
	EXPORT void btSoftBody_sCti_setColObj(btSoftBody::sCti* obj, btCollisionObject* value);
	//EXPORT void btSoftBody_sCti_setNormal(btSoftBody::sCti* obj, void value);
	EXPORT void btSoftBody_sCti_setOffset(btSoftBody::sCti* obj, btScalar value);
	EXPORT void btSoftBody_sCti_delete(btSoftBody::sCti* obj);

	EXPORT btSoftBody::sMedium* btSoftBody_sMedium_new();
	EXPORT btScalar btSoftBody_sMedium_getDensity(btSoftBody::sMedium* obj);
	EXPORT btScalar btSoftBody_sMedium_getPressure(btSoftBody::sMedium* obj);
	EXPORT void btSoftBody_sMedium_getVelocity(btSoftBody::sMedium* obj);
	EXPORT void btSoftBody_sMedium_setDensity(btSoftBody::sMedium* obj, btScalar value);
	EXPORT void btSoftBody_sMedium_setPressure(btSoftBody::sMedium* obj, btScalar value);
	//EXPORT void btSoftBody_sMedium_setVelocity(btSoftBody::sMedium* obj, void value);
	EXPORT void btSoftBody_sMedium_delete(btSoftBody::sMedium* obj);

	EXPORT btSoftBody::Element* btSoftBody_Element_new();
	EXPORT void* btSoftBody_Element_getTag(btSoftBody::Element* obj);
	EXPORT void btSoftBody_Element_setTag(btSoftBody::Element* obj, void* value);
	EXPORT void btSoftBody_Element_delete(btSoftBody::Element* obj);

	EXPORT btSoftBody::Material* btSoftBody_Material_new();
	EXPORT int btSoftBody_Material_getFlags(btSoftBody::Material* obj);
	EXPORT btScalar btSoftBody_Material_getKAST(btSoftBody::Material* obj);
	EXPORT btScalar btSoftBody_Material_getKLST(btSoftBody::Material* obj);
	EXPORT btScalar btSoftBody_Material_getKVST(btSoftBody::Material* obj);
	EXPORT void btSoftBody_Material_setFlags(btSoftBody::Material* obj, int value);
	EXPORT void btSoftBody_Material_setKAST(btSoftBody::Material* obj, btScalar value);
	EXPORT void btSoftBody_Material_setKLST(btSoftBody::Material* obj, btScalar value);
	EXPORT void btSoftBody_Material_setKVST(btSoftBody::Material* obj, btScalar value);

	EXPORT btSoftBody::Feature* btSoftBody_Feature_new();
	EXPORT btSoftBody::Material* btSoftBody_Feature_getMaterial(btSoftBody::Feature* obj);
	EXPORT void btSoftBody_Feature_setMaterial(btSoftBody::Feature* obj, btSoftBody::Material* value);

	EXPORT btSoftBody::Node* btSoftBody_Node_new();
	EXPORT btScalar btSoftBody_Node_getArea(btSoftBody::Node* obj);
	EXPORT int btSoftBody_Node_getBattach(btSoftBody::Node* obj);
	EXPORT void btSoftBody_Node_getF(btSoftBody::Node* obj);
	EXPORT btScalar btSoftBody_Node_getIm(btSoftBody::Node* obj);
	EXPORT btDbvtNode* btSoftBody_Node_getLeaf(btSoftBody::Node* obj);
	EXPORT void btSoftBody_Node_getN(btSoftBody::Node* obj);
	EXPORT void btSoftBody_Node_getQ(btSoftBody::Node* obj);
	EXPORT void btSoftBody_Node_getV(btSoftBody::Node* obj);
	EXPORT void btSoftBody_Node_getX(btSoftBody::Node* obj);
	EXPORT void btSoftBody_Node_setArea(btSoftBody::Node* obj, btScalar value);
	EXPORT void btSoftBody_Node_setBattach(btSoftBody::Node* obj, int value);
	//EXPORT void btSoftBody_Node_setF(btSoftBody::Node* obj, void value);
	EXPORT void btSoftBody_Node_setIm(btSoftBody::Node* obj, btScalar value);
	EXPORT void btSoftBody_Node_setLeaf(btSoftBody::Node* obj, btDbvtNode* value);
	//EXPORT void btSoftBody_Node_setN(btSoftBody::Node* obj, void value);
	//EXPORT void btSoftBody_Node_setQ(btSoftBody::Node* obj, void value);
	//EXPORT void btSoftBody_Node_setV(btSoftBody::Node* obj, void value);
	//EXPORT void btSoftBody_Node_setX(btSoftBody::Node* obj, void value);

	EXPORT btSoftBody::Link* btSoftBody_Link_new();
	EXPORT int btSoftBody_Link_getBbending(btSoftBody::Link* obj);
	EXPORT btScalar btSoftBody_Link_getC0(btSoftBody::Link* obj);
	EXPORT btScalar btSoftBody_Link_getC1(btSoftBody::Link* obj);
	EXPORT btScalar btSoftBody_Link_getC2(btSoftBody::Link* obj);
	EXPORT void btSoftBody_Link_getC3(btSoftBody::Link* obj);
	//EXPORT * btSoftBody_Link_getN(btSoftBody::Link* obj);
	EXPORT btScalar btSoftBody_Link_getRl(btSoftBody::Link* obj);
	EXPORT void btSoftBody_Link_setBbending(btSoftBody::Link* obj, int value);
	EXPORT void btSoftBody_Link_setC0(btSoftBody::Link* obj, btScalar value);
	EXPORT void btSoftBody_Link_setC1(btSoftBody::Link* obj, btScalar value);
	EXPORT void btSoftBody_Link_setC2(btSoftBody::Link* obj, btScalar value);
	//EXPORT void btSoftBody_Link_setC3(btSoftBody::Link* obj, void value);
	//EXPORT void btSoftBody_Link_setN(btSoftBody::Link* obj, * value);
	EXPORT void btSoftBody_Link_setRl(btSoftBody::Link* obj, btScalar value);

	EXPORT btSoftBody::Face* btSoftBody_Face_new();
	EXPORT btDbvtNode* btSoftBody_Face_getLeaf(btSoftBody::Face* obj);
	//EXPORT * btSoftBody_Face_getN(btSoftBody::Face* obj);
	EXPORT void btSoftBody_Face_getNormal(btSoftBody::Face* obj);
	EXPORT btScalar btSoftBody_Face_getRa(btSoftBody::Face* obj);
	EXPORT void btSoftBody_Face_setLeaf(btSoftBody::Face* obj, btDbvtNode* value);
	//EXPORT void btSoftBody_Face_setN(btSoftBody::Face* obj, * value);
	//EXPORT void btSoftBody_Face_setNormal(btSoftBody::Face* obj, void value);
	EXPORT void btSoftBody_Face_setRa(btSoftBody::Face* obj, btScalar value);

	EXPORT btSoftBody::Tetra* btSoftBody_Tetra_new();
	EXPORT btScalar* btSoftBody_Tetra_getC0(btSoftBody::Tetra* obj);
	EXPORT btScalar btSoftBody_Tetra_getC1(btSoftBody::Tetra* obj);
	EXPORT btScalar btSoftBody_Tetra_getC2(btSoftBody::Tetra* obj);
	EXPORT btDbvtNode* btSoftBody_Tetra_getLeaf(btSoftBody::Tetra* obj);
	//EXPORT * btSoftBody_Tetra_getN(btSoftBody::Tetra* obj);
	EXPORT btScalar btSoftBody_Tetra_getRv(btSoftBody::Tetra* obj);
	EXPORT void btSoftBody_Tetra_setC0(btSoftBody::Tetra* obj, btScalar* value);
	EXPORT void btSoftBody_Tetra_setC1(btSoftBody::Tetra* obj, btScalar value);
	EXPORT void btSoftBody_Tetra_setC2(btSoftBody::Tetra* obj, btScalar value);
	EXPORT void btSoftBody_Tetra_setLeaf(btSoftBody::Tetra* obj, btDbvtNode* value);
	//EXPORT void btSoftBody_Tetra_setN(btSoftBody::Tetra* obj, * value);
	EXPORT void btSoftBody_Tetra_setRv(btSoftBody::Tetra* obj, btScalar value);

	EXPORT btSoftBody::RContact* btSoftBody_RContact_new();
	EXPORT void btSoftBody_RContact_getC0(btSoftBody::RContact* obj);
	EXPORT void btSoftBody_RContact_getC1(btSoftBody::RContact* obj);
	EXPORT btScalar btSoftBody_RContact_getC2(btSoftBody::RContact* obj);
	EXPORT btScalar btSoftBody_RContact_getC3(btSoftBody::RContact* obj);
	EXPORT btScalar btSoftBody_RContact_getC4(btSoftBody::RContact* obj);
	EXPORT void btSoftBody_RContact_getCti(btSoftBody::RContact* obj);
	EXPORT btSoftBody::Node* btSoftBody_RContact_getNode(btSoftBody::RContact* obj);
	//EXPORT void btSoftBody_RContact_setC0(btSoftBody::RContact* obj, void value);
	//EXPORT void btSoftBody_RContact_setC1(btSoftBody::RContact* obj, void value);
	EXPORT void btSoftBody_RContact_setC2(btSoftBody::RContact* obj, btScalar value);
	EXPORT void btSoftBody_RContact_setC3(btSoftBody::RContact* obj, btScalar value);
	EXPORT void btSoftBody_RContact_setC4(btSoftBody::RContact* obj, btScalar value);
	//EXPORT void btSoftBody_RContact_setCti(btSoftBody::RContact* obj, void value);
	EXPORT void btSoftBody_RContact_setNode(btSoftBody::RContact* obj, btSoftBody::Node* value);
	EXPORT void btSoftBody_RContact_delete(btSoftBody::RContact* obj);

	EXPORT btSoftBody::SContact* btSoftBody_SContact_new();
	EXPORT btScalar* btSoftBody_SContact_getCfm(btSoftBody::SContact* obj);
	EXPORT btSoftBody::Face* btSoftBody_SContact_getFace(btSoftBody::SContact* obj);
	EXPORT btScalar btSoftBody_SContact_getFriction(btSoftBody::SContact* obj);
	EXPORT btScalar btSoftBody_SContact_getMargin(btSoftBody::SContact* obj);
	EXPORT btSoftBody::Node* btSoftBody_SContact_getNode(btSoftBody::SContact* obj);
	EXPORT void btSoftBody_SContact_getNormal(btSoftBody::SContact* obj);
	EXPORT void btSoftBody_SContact_getWeights(btSoftBody::SContact* obj);
	EXPORT void btSoftBody_SContact_setCfm(btSoftBody::SContact* obj, btScalar* value);
	EXPORT void btSoftBody_SContact_setFace(btSoftBody::SContact* obj, btSoftBody::Face* value);
	EXPORT void btSoftBody_SContact_setFriction(btSoftBody::SContact* obj, btScalar value);
	EXPORT void btSoftBody_SContact_setMargin(btSoftBody::SContact* obj, btScalar value);
	EXPORT void btSoftBody_SContact_setNode(btSoftBody::SContact* obj, btSoftBody::Node* value);
	//EXPORT void btSoftBody_SContact_setNormal(btSoftBody::SContact* obj, void value);
	//EXPORT void btSoftBody_SContact_setWeights(btSoftBody::SContact* obj, void value);
	EXPORT void btSoftBody_SContact_delete(btSoftBody::SContact* obj);

	EXPORT btSoftBody::Anchor* btSoftBody_Anchor_new();
	EXPORT btRigidBody* btSoftBody_Anchor_getBody(btSoftBody::Anchor* obj);
	EXPORT void btSoftBody_Anchor_getC0(btSoftBody::Anchor* obj);
	EXPORT void btSoftBody_Anchor_getC1(btSoftBody::Anchor* obj);
	EXPORT btScalar btSoftBody_Anchor_getC2(btSoftBody::Anchor* obj);
	EXPORT btScalar btSoftBody_Anchor_getInfluence(btSoftBody::Anchor* obj);
	EXPORT void btSoftBody_Anchor_getLocal(btSoftBody::Anchor* obj);
	EXPORT btSoftBody::Node* btSoftBody_Anchor_getNode(btSoftBody::Anchor* obj);
	EXPORT void btSoftBody_Anchor_setBody(btSoftBody::Anchor* obj, btRigidBody* value);
	//EXPORT void btSoftBody_Anchor_setC0(btSoftBody::Anchor* obj, void value);
	//EXPORT void btSoftBody_Anchor_setC1(btSoftBody::Anchor* obj, void value);
	EXPORT void btSoftBody_Anchor_setC2(btSoftBody::Anchor* obj, btScalar value);
	EXPORT void btSoftBody_Anchor_setInfluence(btSoftBody::Anchor* obj, btScalar value);
	//EXPORT void btSoftBody_Anchor_setLocal(btSoftBody::Anchor* obj, void value);
	EXPORT void btSoftBody_Anchor_setNode(btSoftBody::Anchor* obj, btSoftBody::Node* value);
	EXPORT void btSoftBody_Anchor_delete(btSoftBody::Anchor* obj);

	EXPORT btSoftBody::Note* btSoftBody_Note_new();
	EXPORT btScalar* btSoftBody_Note_getCoords(btSoftBody::Note* obj);
	//EXPORT * btSoftBody_Note_getNodes(btSoftBody::Note* obj);
	EXPORT void btSoftBody_Note_getOffset(btSoftBody::Note* obj);
	EXPORT int btSoftBody_Note_getRank(btSoftBody::Note* obj);
	EXPORT const char* btSoftBody_Note_getText(btSoftBody::Note* obj);
	EXPORT void btSoftBody_Note_setCoords(btSoftBody::Note* obj, btScalar* value);
	//EXPORT void btSoftBody_Note_setNodes(btSoftBody::Note* obj, * value);
	//EXPORT void btSoftBody_Note_setOffset(btSoftBody::Note* obj, void value);
	EXPORT void btSoftBody_Note_setRank(btSoftBody::Note* obj, int value);
	EXPORT void btSoftBody_Note_setText(btSoftBody::Note* obj, char* value);

	EXPORT btSoftBody::Pose* btSoftBody_Pose_new();
	EXPORT void btSoftBody_Pose_getAqq(btSoftBody::Pose* obj);
	EXPORT bool btSoftBody_Pose_getBframe(btSoftBody::Pose* obj);
	EXPORT bool btSoftBody_Pose_getBvolume(btSoftBody::Pose* obj);
	EXPORT void btSoftBody_Pose_getCom(btSoftBody::Pose* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Pose_getPos(btSoftBody::Pose* obj);
	EXPORT void btSoftBody_Pose_getRot(btSoftBody::Pose* obj);
	EXPORT void btSoftBody_Pose_getScl(btSoftBody::Pose* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Pose_getWgh(btSoftBody::Pose* obj);
	EXPORT btScalar btSoftBody_Pose_getVolume(btSoftBody::Pose* obj);
	//EXPORT void btSoftBody_Pose_setAqq(btSoftBody::Pose* obj, void value);
	EXPORT void btSoftBody_Pose_setBframe(btSoftBody::Pose* obj, bool value);
	EXPORT void btSoftBody_Pose_setBvolume(btSoftBody::Pose* obj, bool value);
	//EXPORT void btSoftBody_Pose_setCom(btSoftBody::Pose* obj, void value);
	//EXPORT void btSoftBody_Pose_setPos(btSoftBody::Pose* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_Pose_setRot(btSoftBody::Pose* obj, void value);
	//EXPORT void btSoftBody_Pose_setScl(btSoftBody::Pose* obj, void value);
	//EXPORT void btSoftBody_Pose_setWgh(btSoftBody::Pose* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_Pose_setVolume(btSoftBody::Pose* obj, btScalar value);
	EXPORT void btSoftBody_Pose_delete(btSoftBody::Pose* obj);

	EXPORT btSoftBody::Cluster* btSoftBody_Cluster_new();
	EXPORT btScalar btSoftBody_Cluster_getAdamping(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getAv(btSoftBody::Cluster* obj);
	EXPORT int btSoftBody_Cluster_getClusterIndex(btSoftBody::Cluster* obj);
	EXPORT bool btSoftBody_Cluster_getCollide(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getCom(btSoftBody::Cluster* obj);
	EXPORT bool btSoftBody_Cluster_getContainsAnchor(btSoftBody::Cluster* obj);
	EXPORT btScalar* btSoftBody_Cluster_getDimpulses(btSoftBody::Cluster* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Cluster_getFramerefs(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getFramexform(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getIdmass(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getImass(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getInvwi(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getLdamping(btSoftBody::Cluster* obj);
	EXPORT btDbvtNode* btSoftBody_Cluster_getLeaf(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getLocii(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getLv(btSoftBody::Cluster* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Cluster_getMasses(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getMatching(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getMaxSelfCollisionImpulse(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getNdamping(btSoftBody::Cluster* obj);
	EXPORT int btSoftBody_Cluster_getNdimpulses(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_getNodes(btSoftBody::Cluster* obj);
	EXPORT int btSoftBody_Cluster_getNvimpulses(btSoftBody::Cluster* obj);
	EXPORT btScalar btSoftBody_Cluster_getSelfCollisionImpulseFactor(btSoftBody::Cluster* obj);
	EXPORT btScalar* btSoftBody_Cluster_getVimpulses(btSoftBody::Cluster* obj);
	EXPORT void btSoftBody_Cluster_setAdamping(btSoftBody::Cluster* obj, btScalar value);
	//EXPORT void btSoftBody_Cluster_setAv(btSoftBody::Cluster* obj, void value);
	EXPORT void btSoftBody_Cluster_setClusterIndex(btSoftBody::Cluster* obj, int value);
	EXPORT void btSoftBody_Cluster_setCollide(btSoftBody::Cluster* obj, bool value);
	//EXPORT void btSoftBody_Cluster_setCom(btSoftBody::Cluster* obj, void value);
	EXPORT void btSoftBody_Cluster_setContainsAnchor(btSoftBody::Cluster* obj, bool value);
	EXPORT void btSoftBody_Cluster_setDimpulses(btSoftBody::Cluster* obj, btScalar* value);
	//EXPORT void btSoftBody_Cluster_setFramerefs(btSoftBody::Cluster* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_Cluster_setFramexform(btSoftBody::Cluster* obj, void value);
	EXPORT void btSoftBody_Cluster_setIdmass(btSoftBody::Cluster* obj, btScalar value);
	EXPORT void btSoftBody_Cluster_setImass(btSoftBody::Cluster* obj, btScalar value);
	//EXPORT void btSoftBody_Cluster_setInvwi(btSoftBody::Cluster* obj, void value);
	EXPORT void btSoftBody_Cluster_setLdamping(btSoftBody::Cluster* obj, btScalar value);
	EXPORT void btSoftBody_Cluster_setLeaf(btSoftBody::Cluster* obj, btDbvtNode* value);
	//EXPORT void btSoftBody_Cluster_setLocii(btSoftBody::Cluster* obj, void value);
	//EXPORT void btSoftBody_Cluster_setLv(btSoftBody::Cluster* obj, void value);
	//EXPORT void btSoftBody_Cluster_setMasses(btSoftBody::Cluster* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_Cluster_setMatching(btSoftBody::Cluster* obj, btScalar value);
	EXPORT void btSoftBody_Cluster_setMaxSelfCollisionImpulse(btSoftBody::Cluster* obj, btScalar value);
	EXPORT void btSoftBody_Cluster_setNdamping(btSoftBody::Cluster* obj, btScalar value);
	EXPORT void btSoftBody_Cluster_setNdimpulses(btSoftBody::Cluster* obj, int value);
	//EXPORT void btSoftBody_Cluster_setNodes(btSoftBody::Cluster* obj, void value);
	EXPORT void btSoftBody_Cluster_setNvimpulses(btSoftBody::Cluster* obj, int value);
	EXPORT void btSoftBody_Cluster_setSelfCollisionImpulseFactor(btSoftBody::Cluster* obj, btScalar value);
	EXPORT void btSoftBody_Cluster_setVimpulses(btSoftBody::Cluster* obj, btScalar* value);
	EXPORT void btSoftBody_Cluster_delete(btSoftBody::Cluster* obj);

	EXPORT btSoftBody::Impulse* btSoftBody_Impulse_new();
	EXPORT int btSoftBody_Impulse_getAsDrift(btSoftBody::Impulse* obj);
	EXPORT int btSoftBody_Impulse_getAsVelocity(btSoftBody::Impulse* obj);
	EXPORT void btSoftBody_Impulse_getDrift(btSoftBody::Impulse* obj);
	EXPORT void btSoftBody_Impulse_getVelocity(btSoftBody::Impulse* obj);
	EXPORT void btSoftBody_Impulse_operator_n(btSoftBody::Impulse* obj);
	EXPORT void btSoftBody_Impulse_operator_m(btSoftBody::Impulse* obj, btScalar x);
	EXPORT void btSoftBody_Impulse_setAsDrift(btSoftBody::Impulse* obj, int value);
	EXPORT void btSoftBody_Impulse_setAsVelocity(btSoftBody::Impulse* obj, int value);
	//EXPORT void btSoftBody_Impulse_setDrift(btSoftBody::Impulse* obj, void value);
	//EXPORT void btSoftBody_Impulse_setVelocity(btSoftBody::Impulse* obj, void value);
	EXPORT void btSoftBody_Impulse_delete(btSoftBody::Impulse* obj);

	EXPORT btSoftBody::Body* btSoftBody_Body_new();
	EXPORT btSoftBody::Body* btSoftBody_Body_new2(btCollisionObject* colObj);
	EXPORT btSoftBody::Body* btSoftBody_Body_new3(btSoftBody::Cluster* p);
	EXPORT void btSoftBody_Body_activate(btSoftBody::Body* obj);
	EXPORT void btSoftBody_Body_angularVelocity(btSoftBody::Body* obj, btScalar* rpos);
	EXPORT void btSoftBody_Body_angularVelocity2(btSoftBody::Body* obj);
	EXPORT void btSoftBody_Body_applyAImpulse(btSoftBody::Body* obj, btSoftBody::Impulse* impulse);
	EXPORT void btSoftBody_Body_applyDAImpulse(btSoftBody::Body* obj, btScalar* impulse);
	EXPORT void btSoftBody_Body_applyDCImpulse(btSoftBody::Body* obj, btScalar* impulse);
	EXPORT void btSoftBody_Body_applyDImpulse(btSoftBody::Body* obj, btScalar* impulse, btScalar* rpos);
	EXPORT void btSoftBody_Body_applyImpulse(btSoftBody::Body* obj, btSoftBody::Impulse* impulse, btScalar* rpos);
	EXPORT void btSoftBody_Body_applyVAImpulse(btSoftBody::Body* obj, btScalar* impulse);
	EXPORT void btSoftBody_Body_applyVImpulse(btSoftBody::Body* obj, btScalar* impulse, btScalar* rpos);
	EXPORT btCollisionObject* btSoftBody_Body_getCollisionObject(btSoftBody::Body* obj);
	EXPORT btRigidBody* btSoftBody_Body_getRigid(btSoftBody::Body* obj);
	EXPORT btSoftBody::Cluster* btSoftBody_Body_getSoft(btSoftBody::Body* obj);
	EXPORT btScalar btSoftBody_Body_invMass(btSoftBody::Body* obj);
	EXPORT btMatrix3x3* btSoftBody_Body_invWorldInertia(btSoftBody::Body* obj);
	EXPORT void btSoftBody_Body_linearVelocity(btSoftBody::Body* obj);
	EXPORT void btSoftBody_Body_setCollisionObject(btSoftBody::Body* obj, btCollisionObject* value);
	EXPORT void btSoftBody_Body_setRigid(btSoftBody::Body* obj, btRigidBody* value);
	EXPORT void btSoftBody_Body_setSoft(btSoftBody::Body* obj, btSoftBody::Cluster* value);
	EXPORT void btSoftBody_Body_velocity(btSoftBody::Body* obj, btScalar* rpos);
	EXPORT btScalar* btSoftBody_Body_xform(btSoftBody::Body* obj);
	EXPORT void btSoftBody_Body_delete(btSoftBody::Body* obj);

	EXPORT btSoftBody::Joint::eType* btSoftBody_Joint_eType_new();
	EXPORT void btSoftBody_Joint_eType_delete(btSoftBody::Joint::eType* obj);

	EXPORT btSoftBody::Joint::Specs* btSoftBody_Joint_Specs_new();
	EXPORT btScalar btSoftBody_Joint_Specs_getCfm(btSoftBody::Joint::Specs* obj);
	EXPORT btScalar btSoftBody_Joint_Specs_getErp(btSoftBody::Joint::Specs* obj);
	EXPORT btScalar btSoftBody_Joint_Specs_getSplit(btSoftBody::Joint::Specs* obj);
	EXPORT void btSoftBody_Joint_Specs_setCfm(btSoftBody::Joint::Specs* obj, btScalar value);
	EXPORT void btSoftBody_Joint_Specs_setErp(btSoftBody::Joint::Specs* obj, btScalar value);
	EXPORT void btSoftBody_Joint_Specs_setSplit(btSoftBody::Joint::Specs* obj, btScalar value);
	EXPORT void btSoftBody_Joint_Specs_delete(btSoftBody::Joint::Specs* obj);
	EXPORT btSoftBody::Body* btSoftBody_Joint_getBodies(btSoftBody::Joint* obj);
	EXPORT btScalar btSoftBody_Joint_getCfm(btSoftBody::Joint* obj);
	EXPORT bool btSoftBody_Joint_getDelete(btSoftBody::Joint* obj);
	EXPORT void btSoftBody_Joint_getDrift(btSoftBody::Joint* obj);
	EXPORT btScalar btSoftBody_Joint_getErp(btSoftBody::Joint* obj);
	EXPORT void btSoftBody_Joint_getMassmatrix(btSoftBody::Joint* obj);
	EXPORT btScalar* btSoftBody_Joint_getRefs(btSoftBody::Joint* obj);
	EXPORT void btSoftBody_Joint_getSdrift(btSoftBody::Joint* obj);
	EXPORT btScalar btSoftBody_Joint_getSplit(btSoftBody::Joint* obj);
	EXPORT void btSoftBody_Joint_Prepare(btSoftBody::Joint* obj, btScalar dt, int iterations);
	EXPORT void btSoftBody_Joint_setBodies(btSoftBody::Joint* obj, btSoftBody::Body* value);
	EXPORT void btSoftBody_Joint_setCfm(btSoftBody::Joint* obj, btScalar value);
	EXPORT void btSoftBody_Joint_setDelete(btSoftBody::Joint* obj, bool value);
	//EXPORT void btSoftBody_Joint_setDrift(btSoftBody::Joint* obj, void value);
	EXPORT void btSoftBody_Joint_setErp(btSoftBody::Joint* obj, btScalar value);
	//EXPORT void btSoftBody_Joint_setMassmatrix(btSoftBody::Joint* obj, void value);
	EXPORT void btSoftBody_Joint_setRefs(btSoftBody::Joint* obj, btScalar* value);
	//EXPORT void btSoftBody_Joint_setSdrift(btSoftBody::Joint* obj, void value);
	EXPORT void btSoftBody_Joint_setSplit(btSoftBody::Joint* obj, btScalar value);
	EXPORT void btSoftBody_Joint_Solve(btSoftBody::Joint* obj, btScalar dt, btScalar sor);
	EXPORT void btSoftBody_Joint_Terminate(btSoftBody::Joint* obj, btScalar dt);
	EXPORT void btSoftBody_Joint_Type(btSoftBody::Joint* obj);
	EXPORT void btSoftBody_Joint_delete(btSoftBody::Joint* obj);

	EXPORT btSoftBody::LJoint* btSoftBody_LJoint_new();
	EXPORT btScalar* btSoftBody_LJoint_getRpos(btSoftBody::LJoint* obj);
	EXPORT void btSoftBody_LJoint_setRpos(btSoftBody::LJoint* obj, btScalar* value);

	EXPORT btSoftBody::AJoint::IControl* btSoftBody_AJoint_IControl_new();
	EXPORT btSoftBody::AJoint::IControl* btSoftBody_AJoint_IControl_Default();
	EXPORT void btSoftBody_AJoint_IControl_Prepare(btSoftBody::AJoint::IControl* obj, btSoftBody::AJoint* __unnamed0);
	EXPORT btScalar btSoftBody_AJoint_IControl_Speed(btSoftBody::AJoint::IControl* obj, btSoftBody::AJoint* __unnamed0, btScalar current);
	EXPORT void btSoftBody_AJoint_IControl_delete(btSoftBody::AJoint::IControl* obj);
	EXPORT btSoftBody::AJoint* btSoftBody_AJoint_new();
	EXPORT btScalar* btSoftBody_AJoint_getAxis(btSoftBody::AJoint* obj);
	EXPORT btSoftBody::AJoint::IControl* btSoftBody_AJoint_getIcontrol(btSoftBody::AJoint* obj);
	EXPORT void btSoftBody_AJoint_setAxis(btSoftBody::AJoint* obj, btScalar* value);
	EXPORT void btSoftBody_AJoint_setIcontrol(btSoftBody::AJoint* obj, btSoftBody::AJoint::IControl* value);

	EXPORT btSoftBody::CJoint* btSoftBody_CJoint_new();
	EXPORT btScalar btSoftBody_CJoint_getFriction(btSoftBody::CJoint* obj);
	EXPORT int btSoftBody_CJoint_getLife(btSoftBody::CJoint* obj);
	EXPORT int btSoftBody_CJoint_getMaxlife(btSoftBody::CJoint* obj);
	EXPORT void btSoftBody_CJoint_getNormal(btSoftBody::CJoint* obj);
	EXPORT btScalar* btSoftBody_CJoint_getRpos(btSoftBody::CJoint* obj);
	EXPORT void btSoftBody_CJoint_setFriction(btSoftBody::CJoint* obj, btScalar value);
	EXPORT void btSoftBody_CJoint_setLife(btSoftBody::CJoint* obj, int value);
	EXPORT void btSoftBody_CJoint_setMaxlife(btSoftBody::CJoint* obj, int value);
	//EXPORT void btSoftBody_CJoint_setNormal(btSoftBody::CJoint* obj, void value);
	EXPORT void btSoftBody_CJoint_setRpos(btSoftBody::CJoint* obj, btScalar* value);

	EXPORT btSoftBody::Config* btSoftBody_Config_new();
	EXPORT void btSoftBody_Config_getAeromodel(btSoftBody::Config* obj);
	EXPORT int btSoftBody_Config_getCiterations(btSoftBody::Config* obj);
	EXPORT int btSoftBody_Config_getCollisions(btSoftBody::Config* obj);
	EXPORT int btSoftBody_Config_getDiterations(btSoftBody::Config* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Config_getDsequence(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKAHR(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKCHR(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKDF(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKDG(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKDP(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKKHR(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKLF(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKMT(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKPR(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSHR(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSK_SPLT_CL(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSKHR_CL(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSR_SPLT_CL(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSRHR_CL(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSS_SPLT_CL(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKSSHR_CL(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKVC(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getKVCF(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getMaxvolume(btSoftBody::Config* obj);
	EXPORT int btSoftBody_Config_getPiterations(btSoftBody::Config* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Config_getPsequence(btSoftBody::Config* obj);
	EXPORT btScalar btSoftBody_Config_getTimescale(btSoftBody::Config* obj);
	EXPORT int btSoftBody_Config_getViterations(btSoftBody::Config* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_Config_getVsequence(btSoftBody::Config* obj);
	//EXPORT void btSoftBody_Config_setAeromodel(btSoftBody::Config* obj, void value);
	EXPORT void btSoftBody_Config_setCiterations(btSoftBody::Config* obj, int value);
	EXPORT void btSoftBody_Config_setCollisions(btSoftBody::Config* obj, int value);
	EXPORT void btSoftBody_Config_setDiterations(btSoftBody::Config* obj, int value);
	//EXPORT void btSoftBody_Config_setDsequence(btSoftBody::Config* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_Config_setKAHR(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKCHR(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKDF(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKDG(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKDP(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKKHR(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKLF(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKMT(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKPR(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSHR(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSK_SPLT_CL(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSKHR_CL(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSR_SPLT_CL(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSRHR_CL(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSS_SPLT_CL(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKSSHR_CL(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKVC(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setKVCF(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setMaxvolume(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setPiterations(btSoftBody::Config* obj, int value);
	//EXPORT void btSoftBody_Config_setPsequence(btSoftBody::Config* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_Config_setTimescale(btSoftBody::Config* obj, btScalar value);
	EXPORT void btSoftBody_Config_setViterations(btSoftBody::Config* obj, int value);
	//EXPORT void btSoftBody_Config_setVsequence(btSoftBody::Config* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_Config_delete(btSoftBody::Config* obj);

	EXPORT btSoftBody::SolverState* btSoftBody_SolverState_new();
	EXPORT btScalar btSoftBody_SolverState_getIsdt(btSoftBody::SolverState* obj);
	EXPORT btScalar btSoftBody_SolverState_getRadmrg(btSoftBody::SolverState* obj);
	EXPORT btScalar btSoftBody_SolverState_getSdt(btSoftBody::SolverState* obj);
	EXPORT btScalar btSoftBody_SolverState_getUpdmrg(btSoftBody::SolverState* obj);
	EXPORT btScalar btSoftBody_SolverState_getVelmrg(btSoftBody::SolverState* obj);
	EXPORT void btSoftBody_SolverState_setIsdt(btSoftBody::SolverState* obj, btScalar value);
	EXPORT void btSoftBody_SolverState_setRadmrg(btSoftBody::SolverState* obj, btScalar value);
	EXPORT void btSoftBody_SolverState_setSdt(btSoftBody::SolverState* obj, btScalar value);
	EXPORT void btSoftBody_SolverState_setUpdmrg(btSoftBody::SolverState* obj, btScalar value);
	EXPORT void btSoftBody_SolverState_setVelmrg(btSoftBody::SolverState* obj, btScalar value);
	EXPORT void btSoftBody_SolverState_delete(btSoftBody::SolverState* obj);

	EXPORT btSoftBody::RayFromToCaster* btSoftBody_RayFromToCaster_new(btScalar* rayFrom, btScalar* rayTo, btScalar mxt);
	EXPORT btSoftBody::Face* btSoftBody_RayFromToCaster_getFace(btSoftBody::RayFromToCaster* obj);
	EXPORT btScalar btSoftBody_RayFromToCaster_getMint(btSoftBody::RayFromToCaster* obj);
	EXPORT void btSoftBody_RayFromToCaster_getRayFrom(btSoftBody::RayFromToCaster* obj);
	EXPORT void btSoftBody_RayFromToCaster_getRayNormalizedDirection(btSoftBody::RayFromToCaster* obj);
	EXPORT void btSoftBody_RayFromToCaster_getRayTo(btSoftBody::RayFromToCaster* obj);
	EXPORT int btSoftBody_RayFromToCaster_getTests(btSoftBody::RayFromToCaster* obj);
	EXPORT btScalar btSoftBody_RayFromToCaster_rayFromToTriangle(btScalar* rayFrom, btScalar* rayTo, btScalar* rayNormalizedDirection, btScalar* a, btScalar* b, btScalar* c, btScalar maxt);
	EXPORT btScalar btSoftBody_RayFromToCaster_rayFromToTriangle2(btScalar* rayFrom, btScalar* rayTo, btScalar* rayNormalizedDirection, btScalar* a, btScalar* b, btScalar* c);
	EXPORT void btSoftBody_RayFromToCaster_setFace(btSoftBody::RayFromToCaster* obj, btSoftBody::Face* value);
	EXPORT void btSoftBody_RayFromToCaster_setMint(btSoftBody::RayFromToCaster* obj, btScalar value);
	//EXPORT void btSoftBody_RayFromToCaster_setRayFrom(btSoftBody::RayFromToCaster* obj, void value);
	//EXPORT void btSoftBody_RayFromToCaster_setRayNormalizedDirection(btSoftBody::RayFromToCaster* obj, void value);
	//EXPORT void btSoftBody_RayFromToCaster_setRayTo(btSoftBody::RayFromToCaster* obj, void value);
	EXPORT void btSoftBody_RayFromToCaster_setTests(btSoftBody::RayFromToCaster* obj, int value);
	EXPORT btSoftBody* btSoftBody_new(btSoftBodyWorldInfo* worldInfo, int node_count, btScalar* x, btScalar* m);
	EXPORT btSoftBody* btSoftBody_new2(btSoftBodyWorldInfo* worldInfo);
	EXPORT void btSoftBody_addAeroForceToFace(btSoftBody* obj, btScalar* windVelocity, int faceIndex);
	EXPORT void btSoftBody_addAeroForceToNode(btSoftBody* obj, btScalar* windVelocity, int nodeIndex);
	EXPORT void btSoftBody_addForce(btSoftBody* obj, btScalar* force);
	EXPORT void btSoftBody_addForce2(btSoftBody* obj, btScalar* force, int node);
	EXPORT void btSoftBody_addVelocity(btSoftBody* obj, btScalar* velocity, int node);
	EXPORT void btSoftBody_addVelocity2(btSoftBody* obj, btScalar* velocity);
	EXPORT void btSoftBody_appendAnchor(btSoftBody* obj, int node, btRigidBody* body, btScalar* localPivot, bool disableCollisionBetweenLinkedBodies, btScalar influence);
	EXPORT void btSoftBody_appendAnchor2(btSoftBody* obj, int node, btRigidBody* body, btScalar* localPivot, bool disableCollisionBetweenLinkedBodies);
	EXPORT void btSoftBody_appendAnchor3(btSoftBody* obj, int node, btRigidBody* body, btScalar* localPivot);
	EXPORT void btSoftBody_appendAnchor4(btSoftBody* obj, int node, btRigidBody* body, bool disableCollisionBetweenLinkedBodies, btScalar influence);
	EXPORT void btSoftBody_appendAnchor5(btSoftBody* obj, int node, btRigidBody* body, bool disableCollisionBetweenLinkedBodies);
	EXPORT void btSoftBody_appendAnchor6(btSoftBody* obj, int node, btRigidBody* body);
	//EXPORT void btSoftBody_appendAngularJoint(btSoftBody* obj, btSoftBody::Joint::Specs* specs, void body);
	EXPORT void btSoftBody_appendAngularJoint2(btSoftBody* obj, btSoftBody::Joint::Specs* specs);
	//EXPORT void btSoftBody_appendAngularJoint3(btSoftBody* obj, btSoftBody::Joint::Specs* specs, btSoftBody::Cluster* body0, void body1);
	EXPORT void btSoftBody_appendAngularJoint4(btSoftBody* obj, btSoftBody::Joint::Specs* specs, btSoftBody* body);
	EXPORT void btSoftBody_appendFace(btSoftBody* obj, int model, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendFace2(btSoftBody* obj, int model);
	EXPORT void btSoftBody_appendFace3(btSoftBody* obj);
	EXPORT void btSoftBody_appendFace4(btSoftBody* obj, int node0, int node1, int node2, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendFace5(btSoftBody* obj, int node0, int node1, int node2);
	EXPORT void btSoftBody_appendLinearJoint(btSoftBody* obj, btSoftBody::Joint::Specs* specs, btSoftBody* body);
	//EXPORT void btSoftBody_appendLinearJoint2(btSoftBody* obj, btSoftBody::Joint::Specs* specs, void body);
	EXPORT void btSoftBody_appendLinearJoint3(btSoftBody* obj, btSoftBody::Joint::Specs* specs);
	//EXPORT void btSoftBody_appendLinearJoint4(btSoftBody* obj, btSoftBody::Joint::Specs* specs, btSoftBody::Cluster* body0, void body1);
	EXPORT void btSoftBody_appendLink(btSoftBody* obj, int node0, int node1, btSoftBody::Material* mat, bool bcheckexist);
	EXPORT void btSoftBody_appendLink2(btSoftBody* obj, int node0, int node1, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendLink3(btSoftBody* obj, int node0, int node1);
	EXPORT void btSoftBody_appendLink4(btSoftBody* obj, int model, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendLink5(btSoftBody* obj, int model);
	EXPORT void btSoftBody_appendLink6(btSoftBody* obj);
	EXPORT void btSoftBody_appendLink7(btSoftBody* obj, btSoftBody::Node* node0, btSoftBody::Node* node1, btSoftBody::Material* mat, bool bcheckexist);
	EXPORT void btSoftBody_appendLink8(btSoftBody* obj, btSoftBody::Node* node0, btSoftBody::Node* node1, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendLink9(btSoftBody* obj, btSoftBody::Node* node0, btSoftBody::Node* node1);
	EXPORT btSoftBody::Material* btSoftBody_appendMaterial(btSoftBody* obj);
	EXPORT void btSoftBody_appendNode(btSoftBody* obj, btScalar* x, btScalar m);
	EXPORT void btSoftBody_appendNote(btSoftBody* obj, char* text, btScalar* o, btSoftBody::Face* feature);
	EXPORT void btSoftBody_appendNote2(btSoftBody* obj, char* text, btScalar* o, btSoftBody::Link* feature);
	EXPORT void btSoftBody_appendNote3(btSoftBody* obj, char* text, btScalar* o, btSoftBody::Node* feature);
	EXPORT void btSoftBody_appendNote4(btSoftBody* obj, char* text, btScalar* o, btVector4* c, btSoftBody::Node* n0, btSoftBody::Node* n1, btSoftBody::Node* n2, btSoftBody::Node* n3);
	EXPORT void btSoftBody_appendNote5(btSoftBody* obj, char* text, btScalar* o, btVector4* c, btSoftBody::Node* n0, btSoftBody::Node* n1, btSoftBody::Node* n2);
	EXPORT void btSoftBody_appendNote6(btSoftBody* obj, char* text, btScalar* o, btVector4* c, btSoftBody::Node* n0, btSoftBody::Node* n1);
	EXPORT void btSoftBody_appendNote7(btSoftBody* obj, char* text, btScalar* o, btVector4* c, btSoftBody::Node* n0);
	EXPORT void btSoftBody_appendNote8(btSoftBody* obj, char* text, btScalar* o, btVector4* c);
	EXPORT void btSoftBody_appendNote9(btSoftBody* obj, char* text, btScalar* o);
	EXPORT void btSoftBody_appendTetra(btSoftBody* obj, int model, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendTetra2(btSoftBody* obj, int node0, int node1, int node2, int node3, btSoftBody::Material* mat);
	EXPORT void btSoftBody_appendTetra3(btSoftBody* obj, int node0, int node1, int node2, int node3);
	EXPORT void btSoftBody_applyClusters(btSoftBody* obj, bool drift);
	EXPORT void btSoftBody_applyForces(btSoftBody* obj);
	EXPORT bool btSoftBody_checkContact(btSoftBody* obj, btCollisionObjectWrapper* colObjWrap, btScalar* x, btScalar margin, btSoftBody::sCti* cti);
	EXPORT bool btSoftBody_checkFace(btSoftBody* obj, int node0, int node1, int node2);
	EXPORT bool btSoftBody_checkLink(btSoftBody* obj, btSoftBody::Node* node0, btSoftBody::Node* node1);
	EXPORT bool btSoftBody_checkLink2(btSoftBody* obj, int node0, int node1);
	EXPORT void btSoftBody_cleanupClusters(btSoftBody* obj);
	EXPORT void btSoftBody_clusterAImpulse(btSoftBody::Cluster* cluster, btSoftBody::Impulse* impulse);
	EXPORT void btSoftBody_clusterCom(btSoftBody::Cluster* cluster);
	EXPORT void btSoftBody_clusterCom2(btSoftBody* obj, int cluster);
	EXPORT int btSoftBody_clusterCount(btSoftBody* obj);
	EXPORT void btSoftBody_clusterDAImpulse(btSoftBody::Cluster* cluster, btScalar* impulse);
	EXPORT void btSoftBody_clusterDCImpulse(btSoftBody::Cluster* cluster, btScalar* impulse);
	EXPORT void btSoftBody_clusterDImpulse(btSoftBody::Cluster* cluster, btScalar* rpos, btScalar* impulse);
	EXPORT void btSoftBody_clusterImpulse(btSoftBody::Cluster* cluster, btScalar* rpos, btSoftBody::Impulse* impulse);
	EXPORT void btSoftBody_clusterVAImpulse(btSoftBody::Cluster* cluster, btScalar* impulse);
	EXPORT void btSoftBody_clusterVelocity(btSoftBody::Cluster* cluster, btScalar* rpos);
	EXPORT void btSoftBody_clusterVImpulse(btSoftBody::Cluster* cluster, btScalar* rpos, btScalar* impulse);
	EXPORT bool btSoftBody_cutLink(btSoftBody* obj, int node0, int node1, btScalar position);
	EXPORT bool btSoftBody_cutLink2(btSoftBody* obj, btSoftBody::Node* node0, btSoftBody::Node* node1, btScalar position);
	EXPORT void btSoftBody_dampClusters(btSoftBody* obj);
	EXPORT void btSoftBody_defaultCollisionHandler(btSoftBody* obj, btCollisionObjectWrapper* pcoWrap);
	EXPORT void btSoftBody_defaultCollisionHandler2(btSoftBody* obj, btSoftBody* psb);
	EXPORT void btSoftBody_evaluateCom(btSoftBody* obj);
	EXPORT int btSoftBody_generateBendingConstraints(btSoftBody* obj, int distance, btSoftBody::Material* mat);
	EXPORT int btSoftBody_generateBendingConstraints2(btSoftBody* obj, int distance);
	EXPORT int btSoftBody_generateClusters(btSoftBody* obj, int k, int maxiterations);
	EXPORT int btSoftBody_generateClusters2(btSoftBody* obj, int k);
	EXPORT void btSoftBody_getAabb(btSoftBody* obj, btScalar* aabbMin, btScalar* aabbMax);
	//EXPORT btAlignedObjectArray* btSoftBody_getAnchors(btSoftBody* obj);
	EXPORT btScalar* btSoftBody_getBounds(btSoftBody* obj);
	EXPORT bool btSoftBody_getBUpdateRtCst(btSoftBody* obj);
	EXPORT void btSoftBody_getCdbvt(btSoftBody* obj);
	EXPORT void btSoftBody_getCfg(btSoftBody* obj);
	EXPORT void btSoftBody_getClusterConnectivity(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getClusters(btSoftBody* obj);
	EXPORT void btSoftBody_getCollisionDisabledObjects(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getFaces(btSoftBody* obj);
	EXPORT void btSoftBody_getFdbvt(btSoftBody* obj);
	EXPORT void btSoftBody_getInitialWorldTransform(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getJoints(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getLinks(btSoftBody* obj);
	EXPORT btScalar btSoftBody_getMass(btSoftBody* obj, int node);
	//EXPORT btAlignedObjectArray* btSoftBody_getMaterials(btSoftBody* obj);
	EXPORT void btSoftBody_getNdbvt(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getNodes(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getNotes(btSoftBody* obj);
	EXPORT void btSoftBody_getPose(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getRcontacts(btSoftBody* obj);
	EXPORT btScalar btSoftBody_getRestLengthScale(btSoftBody* obj);
	EXPORT btScalar btSoftBody_getRestLengthScale2(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getScontacts(btSoftBody* obj);
	EXPORT btSoftBodySolver* btSoftBody_getSoftBodySolver(btSoftBody* obj);
	EXPORT btSoftBodySolver* btSoftBody_getSoftBodySolver2(btSoftBody* obj);
	//EXPORT * btSoftBody_getSolver(void solver);
	//EXPORT * btSoftBody_getSolver2(void solver);
	EXPORT void btSoftBody_getSst(btSoftBody* obj);
	EXPORT void* btSoftBody_getTag(btSoftBody* obj);
	//EXPORT btAlignedObjectArray* btSoftBody_getTetras(btSoftBody* obj);
	EXPORT btScalar btSoftBody_getTimeacc(btSoftBody* obj);
	EXPORT btScalar btSoftBody_getTotalMass(btSoftBody* obj);
	EXPORT void btSoftBody_getUserIndexMapping(btSoftBody* obj);
	EXPORT void btSoftBody_getWindVelocity(btSoftBody* obj);
	EXPORT btScalar* btSoftBody_getWindVelocity2(btSoftBody* obj);
	EXPORT btScalar btSoftBody_getVolume(btSoftBody* obj);
	EXPORT btSoftBodyWorldInfo* btSoftBody_getWorldInfo(btSoftBody* obj);
	EXPORT btSoftBodyWorldInfo* btSoftBody_getWorldInfo2(btSoftBody* obj);
	EXPORT void btSoftBody_indicesToPointers(btSoftBody* obj, int* map);
	EXPORT void btSoftBody_indicesToPointers2(btSoftBody* obj);
	EXPORT void btSoftBody_initDefaults(btSoftBody* obj);
	EXPORT void btSoftBody_initializeClusters(btSoftBody* obj);
	EXPORT void btSoftBody_initializeFaceTree(btSoftBody* obj);
	EXPORT void btSoftBody_integrateMotion(btSoftBody* obj);
	EXPORT void btSoftBody_pointersToIndices(btSoftBody* obj);
	EXPORT void btSoftBody_predictMotion(btSoftBody* obj, btScalar dt);
	EXPORT void btSoftBody_prepareClusters(btSoftBody* obj, int iterations);
	EXPORT void btSoftBody_PSolve_Anchors(btSoftBody* psb, btScalar kst, btScalar ti);
	EXPORT void btSoftBody_PSolve_Links(btSoftBody* psb, btScalar kst, btScalar ti);
	EXPORT void btSoftBody_PSolve_RContacts(btSoftBody* psb, btScalar kst, btScalar ti);
	EXPORT void btSoftBody_PSolve_SContacts(btSoftBody* psb, btScalar __unnamed1, btScalar ti);
	EXPORT void btSoftBody_randomizeConstraints(btSoftBody* obj);
	//EXPORT int btSoftBody_rayTest(btSoftBody* obj, btScalar* rayFrom, btScalar* rayTo, btScalar* mint, _* feature, int* index, bool bcountonly);
	EXPORT bool btSoftBody_rayTest2(btSoftBody* obj, btScalar* rayFrom, btScalar* rayTo, btSoftBody::sRayCast* results);
	EXPORT void btSoftBody_refine(btSoftBody* obj, btSoftBody::ImplicitFn* ifn, btScalar accurary, bool cut);
	EXPORT void btSoftBody_releaseCluster(btSoftBody* obj, int index);
	EXPORT void btSoftBody_releaseClusters(btSoftBody* obj);
	EXPORT void btSoftBody_resetLinkRestLengths(btSoftBody* obj);
	EXPORT void btSoftBody_rotate(btSoftBody* obj, btQuaternion* rot);
	EXPORT void btSoftBody_scale(btSoftBody* obj, btScalar* scl);
	//EXPORT void btSoftBody_setAnchors(btSoftBody* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_setBounds(btSoftBody* obj, btScalar* value);
	EXPORT void btSoftBody_setBUpdateRtCst(btSoftBody* obj, bool value);
	//EXPORT void btSoftBody_setCdbvt(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setCfg(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setClusterConnectivity(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setClusters(btSoftBody* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_setCollisionDisabledObjects(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setFaces(btSoftBody* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_setFdbvt(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setInitialWorldTransform(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setJoints(btSoftBody* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_setLinks(btSoftBody* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_setMass(btSoftBody* obj, int node, btScalar mass);
	//EXPORT void btSoftBody_setMaterials(btSoftBody* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_setNdbvt(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setNodes(btSoftBody* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_setNotes(btSoftBody* obj, btAlignedObjectArray* value);
	//EXPORT void btSoftBody_setPose(btSoftBody* obj, void value);
	EXPORT void btSoftBody_setPose2(btSoftBody* obj, bool bvolume, bool bframe);
	//EXPORT void btSoftBody_setRcontacts(btSoftBody* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_setRestLengthScale(btSoftBody* obj, btScalar restLength);
	EXPORT void btSoftBody_setRestLengthScale2(btSoftBody* obj, btScalar value);
	//EXPORT void btSoftBody_setScontacts(btSoftBody* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_setSoftBodySolver(btSoftBody* obj, btSoftBodySolver* softBodySolver);
	EXPORT void btSoftBody_setSoftBodySolver2(btSoftBody* obj, btSoftBodySolver* value);
	//EXPORT void btSoftBody_setSolver(btSoftBody* obj, void preset);
	//EXPORT void btSoftBody_setSst(btSoftBody* obj, void value);
	//EXPORT void btSoftBody_setTag(btSoftBody* obj, void* value);
	//EXPORT void btSoftBody_setTetras(btSoftBody* obj, btAlignedObjectArray* value);
	EXPORT void btSoftBody_setTimeacc(btSoftBody* obj, btScalar value);
	EXPORT void btSoftBody_setTotalDensity(btSoftBody* obj, btScalar density);
	EXPORT void btSoftBody_setTotalMass(btSoftBody* obj, btScalar mass, bool fromfaces);
	EXPORT void btSoftBody_setTotalMass2(btSoftBody* obj, btScalar mass);
	//EXPORT void btSoftBody_setUserIndexMapping(btSoftBody* obj, void value);
	EXPORT void btSoftBody_setVelocity(btSoftBody* obj, btScalar* velocity);
	EXPORT void btSoftBody_setWindVelocity(btSoftBody* obj, btScalar* velocity);
	//EXPORT void btSoftBody_setWindVelocity2(btSoftBody* obj, void value);
	EXPORT void btSoftBody_setVolumeDensity(btSoftBody* obj, btScalar density);
	EXPORT void btSoftBody_setVolumeMass(btSoftBody* obj, btScalar mass);
	EXPORT void btSoftBody_setWorldInfo(btSoftBody* obj, btSoftBodyWorldInfo* value);
	//EXPORT void btSoftBody_solveClusters(btAlignedObjectArray* bodies);
	EXPORT void btSoftBody_solveClusters2(btSoftBody* obj, btScalar sor);
	//EXPORT void btSoftBody_solveCommonConstraints(* bodies, int count, int iterations);
	EXPORT void btSoftBody_solveConstraints(btSoftBody* obj);
	EXPORT void btSoftBody_staticSolve(btSoftBody* obj, int iterations);
	EXPORT void btSoftBody_transform(btSoftBody* obj, btScalar* trs);
	EXPORT void btSoftBody_translate(btSoftBody* obj, btScalar* trs);
	EXPORT btSoftBody* btSoftBody_upcast(btCollisionObject* colObj);
	EXPORT void btSoftBody_updateArea(btSoftBody* obj, bool averageArea);
	EXPORT void btSoftBody_updateArea2(btSoftBody* obj);
	EXPORT void btSoftBody_updateBounds(btSoftBody* obj);
	EXPORT void btSoftBody_updateClusters(btSoftBody* obj);
	EXPORT void btSoftBody_updateConstants(btSoftBody* obj);
	EXPORT void btSoftBody_updateLinkConstants(btSoftBody* obj);
	EXPORT void btSoftBody_updateNormals(btSoftBody* obj);
	EXPORT void btSoftBody_updatePose(btSoftBody* obj);
	EXPORT void btSoftBody_VSolve_Links(btSoftBody* psb, btScalar kst);
}
